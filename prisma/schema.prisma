generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  addresses     Address[]
  orders        Order[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Address {
  id             String      @id @default(cuid())
  userId         String?
  type           AddressType
  firstName      String
  lastName       String
  company        String?
  addressLine1   String
  addressLine2   String?
  city           String
  state          String?
  postalCode     String
  country        String      @default("Tunisia")
  phone          String?
  isDefault      Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  user           User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders  Order[]     @relation("OrderBillingAddress")
  shippingOrders Order[]     @relation("OrderShippingAddress")

  @@map("addresses")
}

model Order {
  id                String               @id @default(cuid())
  orderNumber       String               @unique
  userId            String?
  status            OrderStatus          @default(PENDING)
  customerEmail     String
  customerFirstName String
  customerLastName  String
  customerPhone     String?
  shippingAddressId String
  billingAddressId  String?
  subtotal          Decimal              @db.Decimal(10, 2)
  shippingCost      Decimal              @default(0) @db.Decimal(10, 2)
  taxAmount         Decimal              @default(0) @db.Decimal(10, 2)
  totalAmount       Decimal              @db.Decimal(10, 2)
  currency          String               @default("TND")
  paymentMethod     PaymentMethod?
  paymentStatus     PaymentStatus        @default(PENDING)
  paymentIntentId   String?
  shippingMethod    String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  notes             String?
  source            OrderSource          @default(WEBSITE)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  placedAt          DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  orderItems        OrderItem[]
  orderHistory      OrderStatusHistory[]
  billingAddress    Address?             @relation("OrderBillingAddress", fields: [billingAddressId], references: [id])
  shippingAddress   Address              @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id])
  user              User?                @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  articleId Int
  articleNo String
  name      String
  supplier  String
  price     Decimal @db.Decimal(10, 2)
  quantity  Int
  image     String?
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model OrderStatusHistory {
  id        String      @id @default(cuid())
  orderId   String
  status    OrderStatus
  notes     String?
  createdAt DateTime    @default(now())
  createdBy String?
  order     Order       @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_status_history")
}

model CartItem {
  id        String   @id @default(cuid())
  sessionId String
  articleId Int
  articleNo String
  name      String
  supplier  String
  price     Decimal  @db.Decimal(10, 2)
  quantity  Int
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([sessionId, articleId])
  @@map("cart_items")
}

model ProductPrice {
  id        String    @id @default(cuid())
  articleId Int
  price     Decimal   @db.Decimal(10, 2)
  currency  String    @default("TND")
  validFrom DateTime  @default(now())
  validTo   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("product_prices")
}

enum AddressType {
  SHIPPING
  BILLING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  READY_TO_SHIP
  SHIPPED
  IN_TRANSIT
  DELIVERED
  CANCELLED
  REFUNDED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  BANK_TRANSFER
  CREDIT_CARD
  PAYPAL
  STRIPE
}

enum OrderSource {
  WEBSITE
  PHONE
  EMAIL
  STORE
}
